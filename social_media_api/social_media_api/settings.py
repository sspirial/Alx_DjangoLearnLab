"""
Django settings for social_media_api project.

Generated by 'django-admin startproject' using Django 5.2.7.

This module has been hardened for production deployments on AWS.
Sensitive configuration values are expected to be provided via
environment variables. Refer to the deployment documentation for
the complete list of required variables.
"""

import importlib
import os
from pathlib import Path
from urllib.parse import parse_qs, urlparse


def _load_dj_database_url():
    try:
        return importlib.import_module('dj_database_url')
    except ImportError:  # pragma: no cover - available in production
        return None


dj_database_url = _load_dj_database_url()


def env_bool(name: str, default: bool = False) -> bool:
    value = os.getenv(name)
    if value is None:
        return default
    return value.strip().lower() in {'true', '1', 'yes', 'on'}

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = os.getenv('DJANGO_SECRET_KEY', 'changeme-in-dev-only')

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = env_bool('DJANGO_DEBUG', default=True)

ALLOWED_HOSTS = [host.strip() for host in os.getenv('DJANGO_ALLOWED_HOSTS', '').split(',') if host.strip()]

CSRF_TRUSTED_ORIGINS = [origin.strip() for origin in os.getenv('DJANGO_CSRF_TRUSTED_ORIGINS', '').split(',') if origin.strip()]

if not DEBUG and not ALLOWED_HOSTS:
    raise RuntimeError('DJANGO_ALLOWED_HOSTS must be set when DEBUG is False')


# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    # Third-party apps
    'rest_framework',
    'rest_framework.authtoken',
    'storages',
    # Local apps
    'accounts',
    'posts',
    'notifications',
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'social_media_api.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'social_media_api.wsgi.application'


# Database
# https://docs.djangoproject.com/en/5.2/ref/settings/#databases

default_db_url = os.getenv('DATABASE_URL')

if default_db_url:
    if dj_database_url:
        conn_max_age = int(os.getenv('DATABASE_CONN_MAX_AGE', '60'))
        ssl_require = env_bool('DATABASE_SSL_REQUIRE', default=not DEBUG)
        DATABASES = {
            'default': dj_database_url.parse(
                default_db_url,
                conn_max_age=conn_max_age,
                ssl_require=ssl_require,
            )
        }
    else:
        parsed_url = urlparse(default_db_url)
        if parsed_url.scheme not in {'postgres', 'postgresql', 'postgresql_psycopg2', 'mysql', 'mysql2', 'mssql', 'oracle', 'sqlite', 'sqlite3'}:
            raise RuntimeError('Unsupported database scheme in DATABASE_URL')

        if parsed_url.scheme.startswith('postgres'):
            engine = 'django.db.backends.postgresql'
        elif parsed_url.scheme.startswith('mysql'):
            engine = 'django.db.backends.mysql'
        elif parsed_url.scheme.startswith('mssql'):
            engine = 'mssql'
        elif parsed_url.scheme.startswith('oracle'):
            engine = 'django.db.backends.oracle'
        else:
            engine = 'django.db.backends.sqlite3'

        query_params = parse_qs(parsed_url.query)
        database_name = parsed_url.path.lstrip('/')
        if engine == 'django.db.backends.sqlite3':
            database_name = database_name or BASE_DIR / 'db.sqlite3'

        DATABASES = {
            'default': {
                'ENGINE': engine,
                'NAME': database_name,
                'USER': parsed_url.username or '',
                'PASSWORD': parsed_url.password or '',
                'HOST': parsed_url.hostname or '',
                'PORT': parsed_url.port or '',
                'OPTIONS': {key: values[-1] for key, values in query_params.items()},
            }
        }

        if parsed_url.scheme.startswith('postgres'):
            DATABASES['default']['OPTIONS'].setdefault('sslmode', os.getenv('DATABASE_SSLMODE', 'require'))
else:
    DATABASES = {
        'default': {
            'ENGINE': 'django.db.backends.sqlite3',
            'NAME': BASE_DIR / 'db.sqlite3',
        }
    }


# Password validation
# https://docs.djangoproject.com/en/5.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/5.2/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.2/howto/static-files/

STATIC_URL = os.getenv('DJANGO_STATIC_URL', '/static/')
STATIC_ROOT = Path(os.getenv('DJANGO_STATIC_ROOT', str(BASE_DIR / 'staticfiles')))

STATICFILES_DIRS = [BASE_DIR / 'static'] if (BASE_DIR / 'static').exists() else []

MEDIA_URL = os.getenv('DJANGO_MEDIA_URL', '/media/')
MEDIA_ROOT = Path(os.getenv('DJANGO_MEDIA_ROOT', str(BASE_DIR / 'media')))

USE_AWS_S3 = env_bool('DJANGO_USE_S3', default=not DEBUG)

if USE_AWS_S3:
    AWS_STORAGE_BUCKET_NAME = os.getenv('AWS_STORAGE_BUCKET_NAME')
    if not AWS_STORAGE_BUCKET_NAME:
        raise RuntimeError('AWS_STORAGE_BUCKET_NAME must be set when DJANGO_USE_S3 is true')

    AWS_S3_REGION_NAME = os.getenv('AWS_S3_REGION_NAME', 'us-east-1')
    AWS_S3_CUSTOM_DOMAIN = os.getenv('AWS_S3_CUSTOM_DOMAIN')
    AWS_DEFAULT_ACL = None
    AWS_S3_OBJECT_PARAMETERS = {
        'CacheControl': os.getenv('AWS_S3_CACHE_CONTROL', 'max-age=86400'),
    }
    AWS_LOCATION = os.getenv('AWS_S3_STATIC_LOCATION', 'static')
    AWS_MEDIA_LOCATION = os.getenv('AWS_S3_MEDIA_LOCATION', 'media')
    AWS_QUERYSTRING_AUTH = env_bool('AWS_S3_QUERYSTRING_AUTH', default=False)

    STATICFILES_STORAGE = 'storages.backends.s3boto3.S3ManifestStaticStorage'
    DEFAULT_FILE_STORAGE = 'storages.backends.s3boto3.S3Boto3Storage'

    STATIC_URL = f"https://{AWS_S3_CUSTOM_DOMAIN or f'{AWS_STORAGE_BUCKET_NAME}.s3.amazonaws.com'}/{AWS_LOCATION}/"
    MEDIA_URL = f"https://{AWS_S3_CUSTOM_DOMAIN or f'{AWS_STORAGE_BUCKET_NAME}.s3.amazonaws.com'}/{AWS_MEDIA_LOCATION}/"

    MEDIA_ROOT = AWS_MEDIA_LOCATION

    AWS_S3_FILE_OVERWRITE = env_bool('AWS_S3_FILE_OVERWRITE', default=False)
    AWS_S3_MAX_MEMORY_SIZE = int(os.getenv('AWS_S3_MAX_MEMORY_SIZE', str(20 * 1024 * 1024)))

# Default primary key field type
# https://docs.djangoproject.com/en/5.2/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

# Custom User Model
AUTH_USER_MODEL = 'accounts.CustomUser'

# Media files (User uploaded content)
# Django REST Framework Configuration
REST_FRAMEWORK = {
    'DEFAULT_AUTHENTICATION_CLASSES': [
        'rest_framework.authentication.TokenAuthentication',
        'rest_framework.authentication.SessionAuthentication',
    ],
    'DEFAULT_PERMISSION_CLASSES': [
        'rest_framework.permissions.IsAuthenticatedOrReadOnly',
    ],
    'DEFAULT_PAGINATION_CLASS': 'rest_framework.pagination.PageNumberPagination',
    'PAGE_SIZE': 10,
}

# Security hardening
SECURE_CROSS_ORIGIN_OPENER_POLICY = os.getenv('DJANGO_SECURE_COOP', 'same-origin')
SECURE_CONTENT_TYPE_NOSNIFF = True
SECURE_REFERRER_POLICY = os.getenv('DJANGO_SECURE_REFERRER_POLICY', 'same-origin')
X_FRAME_OPTIONS = os.getenv('DJANGO_X_FRAME_OPTIONS', 'DENY')

SECURE_SSL_REDIRECT = (not DEBUG) and env_bool('DJANGO_SECURE_SSL_REDIRECT', default=True)
SECURE_PROXY_SSL_HEADER = ('HTTP_X_FORWARDED_PROTO', 'https')

SESSION_COOKIE_SECURE = (not DEBUG) and env_bool('DJANGO_SESSION_COOKIE_SECURE', default=True)
CSRF_COOKIE_SECURE = (not DEBUG) and env_bool('DJANGO_CSRF_COOKIE_SECURE', default=True)
CSRF_COOKIE_HTTPONLY = env_bool('DJANGO_CSRF_COOKIE_HTTPONLY', default=True)
SESSION_COOKIE_HTTPONLY = env_bool('DJANGO_SESSION_COOKIE_HTTPONLY', default=True)

SECURE_HSTS_SECONDS = int(os.getenv('DJANGO_SECURE_HSTS_SECONDS', '31536000')) if not DEBUG else 0
SECURE_HSTS_INCLUDE_SUBDOMAINS = (not DEBUG) and env_bool('DJANGO_SECURE_HSTS_INCLUDE_SUBDOMAINS', default=True)
SECURE_HSTS_PRELOAD = (not DEBUG) and env_bool('DJANGO_SECURE_HSTS_PRELOAD', default=True)

# Logging configuration suitable for Elastic Beanstalk / CloudWatch
LOG_LEVEL = os.getenv('DJANGO_LOG_LEVEL', 'INFO')

LOGGING = {
    'version': 1,
    'disable_existing_loggers': False,
    'formatters': {
        'verbose': {
            'format': '[{asctime}] {levelname} {name} {message}',
            'style': '{',
        },
    },
    'handlers': {
        'console': {
            'class': 'logging.StreamHandler',
            'formatter': 'verbose',
        },
    },
    'root': {
        'handlers': ['console'],
        'level': LOG_LEVEL,
    },
    'loggers': {
        'django.request': {
            'handlers': ['console'],
            'level': os.getenv('DJANGO_DJANGO_REQUEST_LOG_LEVEL', LOG_LEVEL),
            'propagate': False,
        },
        'django.security': {
            'handlers': ['console'],
            'level': 'WARNING',
            'propagate': False,
        },
    },
}
